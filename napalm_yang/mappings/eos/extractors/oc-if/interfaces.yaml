---
metadata:
    prefix: "oc-if"
    parser: TextExtractor
    execute:
        config:
            - method: cli
              args:
                  commands: ["show running-config all"]
interfaces:
    interface:
        _list_extraction:
            mode: block
            regexp: "(?P<block>interface (?P<key>(Ethernet|Management|Loopback|Port-Channel|Vlan)\\d+)\n(?:.|\n)*?^!$)"
            from: interfaces.0.show running-config all
        name:
            _leaf_extraction:
                mode: key
                value: interface_key
        hold_time:
            config:
                down:
                    _leaf_extraction:
                        mode: not_implemented
                up:
                    _leaf_extraction:
                        mode: not_implemented
        config:
            name:
                _leaf_extraction:
                    mode: key
                    value: interface_key
            type_:
                _leaf_extraction:
                    mode: map
                    regexp: "interface (?P<value>(Ethernet|Management|Loopback|Port-Channel|Vlan)).*"
                    from: "interface.{interface_key}"
                    map:
                        Ethernet: napalm_yang.ianaift.Ethernetcsmacd
                        Management: napalm_yang.ianaift.Ethernetcsmacd
                        Loopback: napalm_yang.ianaift.Softwareloopback
                        Port-Channel: napalm_yang.ianaift.Ieee8023Adlag
                        Vlan: napalm_yang.ianaift.L3Ipvlan
            enabled:
                _leaf_extraction:
                    mode: is_present
                    regexp: "(?P<value>no shutdown)"
                    from: "interface.{interface_key}"
                    type: boolean
            description:
                _leaf_extraction:
                    mode: search
                    regexp: "description (?P<value>.*)"
                    type: py23_compat.text_type
                    from: "interface.{interface_key}"
                    default: ""
            mtu:
                _leaf_extraction:
                    mode: search
                    regexp: "mtu (?P<value>[0-9]+)"
                    from: "interface.{interface_key}"
                    type: int
                    default: 1500
        subinterfaces:
            subinterface:
                _list_extraction:
                    mode: block
                    regexp: "(?P<block>interface (?P<key>{interface_key}\\.\\d+)\\n(?:.|\\n)*?^!$)"
                    from: interfaces.0.show running-config all
                index:
                    _leaf_extraction:
                        mode: not_implemented
                config:
                    index:
                        _leaf_extraction:
                            mode: not_implemented
                    name:
                        _leaf_extraction:
                            mode: key
                            value: subinterface_key
                    enabled:
                        _leaf_extraction:
                            mode: is_present
                            regexp: "(?P<value>no shutdown)"
                            from: "subinterface.{subinterface_key}"
                            type: boolean
                    description:
                        _leaf_extraction:
                            mode: search
                            regexp: "description (?P<value>.*)"
                            type: py23_compat.text_type
                            from: "subinterface.{subinterface_key}"
                            default: ""
