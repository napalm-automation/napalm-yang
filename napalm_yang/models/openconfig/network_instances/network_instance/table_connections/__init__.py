
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import table_connection
class table_connections(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/table-connections. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Policies dictating how RIB or FIB entries are propagated
between tables
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__table_connection',)

  _yang_name = 'table-connections'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__table_connection = YANGDynClass(base=YANGListType("src_protocol dst_protocol address_family",table_connection.table_connection, yang_name="table-connection", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-protocol dst-protocol address-family', extensions=None), is_container='list', yang_name="table-connection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'network-instances', u'network-instance', u'table-connections']

  def _get_table_connection(self):
    """
    Getter method for table_connection, mapped from YANG variable /network_instances/network_instance/table_connections/table_connection (list)

    YANG Description: A list of connections between pairs of routing or
forwarding tables, the leaking of entries between
which is specified by the import policy.

A connection connecting a source table to a destination
table implies that routes that match the policy specified
for the connection are available for the destination
protocol to advertise, or match within its policies.
    """
    return self.__table_connection
      
  def _set_table_connection(self, v, load=False):
    """
    Setter method for table_connection, mapped from YANG variable /network_instances/network_instance/table_connections/table_connection (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_table_connection is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_table_connection() directly.

    YANG Description: A list of connections between pairs of routing or
forwarding tables, the leaking of entries between
which is specified by the import policy.

A connection connecting a source table to a destination
table implies that routes that match the policy specified
for the connection are available for the destination
protocol to advertise, or match within its policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("src_protocol dst_protocol address_family",table_connection.table_connection, yang_name="table-connection", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-protocol dst-protocol address-family', extensions=None), is_container='list', yang_name="table-connection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """table_connection must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("src_protocol dst_protocol address_family",table_connection.table_connection, yang_name="table-connection", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-protocol dst-protocol address-family', extensions=None), is_container='list', yang_name="table-connection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__table_connection = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_table_connection(self):
    self.__table_connection = YANGDynClass(base=YANGListType("src_protocol dst_protocol address_family",table_connection.table_connection, yang_name="table-connection", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-protocol dst-protocol address-family', extensions=None), is_container='list', yang_name="table-connection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  table_connection = __builtin__.property(_get_table_connection, _set_table_connection)


  _pyangbind_elements = {'table_connection': table_connection, }


import table_connection
class table_connections(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/table-connections. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Policies dictating how RIB or FIB entries are propagated
between tables
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__table_connection',)

  _yang_name = 'table-connections'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__table_connection = YANGDynClass(base=YANGListType("src_protocol dst_protocol address_family",table_connection.table_connection, yang_name="table-connection", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-protocol dst-protocol address-family', extensions=None), is_container='list', yang_name="table-connection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'network-instances', u'network-instance', u'table-connections']

  def _get_table_connection(self):
    """
    Getter method for table_connection, mapped from YANG variable /network_instances/network_instance/table_connections/table_connection (list)

    YANG Description: A list of connections between pairs of routing or
forwarding tables, the leaking of entries between
which is specified by the import policy.

A connection connecting a source table to a destination
table implies that routes that match the policy specified
for the connection are available for the destination
protocol to advertise, or match within its policies.
    """
    return self.__table_connection
      
  def _set_table_connection(self, v, load=False):
    """
    Setter method for table_connection, mapped from YANG variable /network_instances/network_instance/table_connections/table_connection (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_table_connection is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_table_connection() directly.

    YANG Description: A list of connections between pairs of routing or
forwarding tables, the leaking of entries between
which is specified by the import policy.

A connection connecting a source table to a destination
table implies that routes that match the policy specified
for the connection are available for the destination
protocol to advertise, or match within its policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("src_protocol dst_protocol address_family",table_connection.table_connection, yang_name="table-connection", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-protocol dst-protocol address-family', extensions=None), is_container='list', yang_name="table-connection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """table_connection must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("src_protocol dst_protocol address_family",table_connection.table_connection, yang_name="table-connection", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-protocol dst-protocol address-family', extensions=None), is_container='list', yang_name="table-connection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__table_connection = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_table_connection(self):
    self.__table_connection = YANGDynClass(base=YANGListType("src_protocol dst_protocol address_family",table_connection.table_connection, yang_name="table-connection", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-protocol dst-protocol address-family', extensions=None), is_container='list', yang_name="table-connection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  table_connection = __builtin__.property(_get_table_connection, _set_table_connection)


  _pyangbind_elements = {'table_connection': table_connection, }


