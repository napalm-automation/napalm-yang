{%- macro process_imports(module) -%}
# Imports
{%- set import = module.pop("import") -%}
{% for k, v in import.items() %}
{% for kk, vv in v.pop("info").items() -%}
from napalm_yang.{{ k|safe_attr_name }} import {{ vv|safe_attr_name }}
{%- endfor -%}
{% endfor %}
{%- endmacro %}


{%- macro process_openconfig_extensions(module) -%}
# openconfig-extensions
{% set oc = module.info.pop("openconfig-extensions") -%}
openconfig_extensions = oc_ext.OpenConfigExtensions()
{% for k, v in oc.items() -%}
openconfig_extensions.{{ k|safe_attr_name }} = "{{ v }}"
{% endfor -%}
{%- endmacro %}

{%- macro process_typedef(module) -%}
# typedef
{%- set typedef = module.pop("typedef") %}
{% for k, v in typedef.items() %}
class {{ k|safe_class_name }}(yang_base.BaseBinding):
    """
{{ v.pop("info").pop("description")|indent }}
    """
    def __init__(self, _meta=None):
        super().__init__(_meta)
{%- for kk, vv in v.pop("type", {}).items() %}
        self.{{ k|safe_attr_name }} = yang.{{ kk|safe_class_name }}({% for kkk, vvv in vv.items() %}{{ kkk }}="{{ vvv }}"{% endfor %})
{% endfor %}
{% endfor %}
{%- endmacro %}


{%- macro process_identities(module) -%}
# Identities
{%- set identity = module.pop("identity") -%}
{% for k, v in identity.items() %}
{{ k }} = yang.Identity(
    base="{{ v.get("base", None) }}",
    value="{{ k }}",
    description="""{{v.info.description}}"""
    )
{% endfor %}
{%- endmacro %}


{%- macro process_classes(module) -%}
# Classes to support containers and lists

{%- set order = module.pop("order") %}
{% for m in order -%}
class {{ m[1]|safe_class_name }}({{ "yang.List" if m[0] == "list" else "yang_base.BaseBinding" }}):
    """
{{ module[m[0]][m[1]].pop("info", {}).pop("description")|indent }}
    """
    def __init__(self):
        super().__init__()
{{ _process_attributes(module[m[0]][m[1]], "container")|indent(8) }}
{{ _process_attributes(module[m[0]][m[1]], "list")|indent(8) }}
{{ _process_leafs(module[m[0]][m[1]])|indent(8) }}
        # Meta
        self._meta["config"] = {{ module[m[0]][m[1]].pop("config", True)|title  }}
        {% if m[0] == "list" %}self._meta["key"] = "{{ module[m[0]][m[1]].pop("key")|safe_attr_name }}"
{% endif %}
{% set ignore = module[m[0]].pop(m[1]) -%}{{ ignore|raise_if_not_empty }}
{% endfor -%}
{%- set ignore = module.pop("container") -%}{{ ignore|raise_if_not_empty -}}
{%- set ignore = module.pop("list") -%}{{ ignore|raise_if_not_empty -}}
{%- endmacro %}


{%- macro _process_attributes(module, type_of_attr) -%}
# {{ type_of_attr }}
{% for a in module.pop(type_of_attr, {}).pop(type_of_attr, []) -%}
self.{{ a[0]|safe_attr_name }} = {{ a[1]|safe_class_name }}()
{% endfor %}
{%- endmacro %}


{%- macro _process_leafs(module) -%}
# leaf
{% for k, v in module.pop("leaf", {}).items() -%}
{% for kk, vv in v.pop("type", {}).items() -%}
self.{{ k|safe_attr_name }} = {{ kk|safe_class_name }}(_meta={"mandatory": {{ v.get("mandatory", False)|title}}}, {% for kkk, vvv in vv.items() %}{{ kkk }}={{ vvv|to_json }}{% endfor %})
{% endfor -%}
{% endfor -%}
{%- endmacro %}


{%- macro process_top(module) -%}
# Top level
{%- set top = module.pop("top") -%}
{% for a in top.pop("container").pop("container") %}
class {{ a[0]|safe_class_name }}({{ a[1]|safe_class_name }}):
    """Top level class"""
    pass
{% endfor %}
{%- endmacro %}
