{%- macro process_identities(module) -%}
### Identities
{% for k, v in module.identity.items() %}
{{ k }} = yang_types.Identity(
    base = {{ v.get("base", None) }},
    value = "{{ k }}",
    description = """{{v.info.description}}"""
    )
{% endfor %}
{%- endmacro %}

{%- macro process_classes(module) -%}
# Classes to support containers and lists


{% for m in module.order -%}
class {{ m[1]|safe_class_name }}({{ "yang_base.Yang_list" if m[0] == "list" else "yang_base.Yang_base" }}):
    """
{{ module[m[0]][m[1]].pop("info", {}).pop("description")|indent }}
    """
{{ _process_attributes(module[m[0]][m[1]], "container")|indent }}
{{ _process_attributes(module[m[0]][m[1]], "list")|indent }}
{{ _process_leafs(module[m[0]][m[1]])|indent }}
    # Meta
    _config = {{ module[m[0]][m[1]].pop("config", True)|safe_class_name }}
{% if m[0] == "list" %}    _key = {{ module[m[0]][m[1]].pop("key")|safe_attr_name }}{% endif %}
{{ module[m[0]][m[1]]|raise_if_not_empty(m) }}
{% endfor %}
{%- endmacro %}

{%- macro _process_attributes(module, type_of_attr) -%}
# {{ type_of_attr }}
{% for a in module.pop(type_of_attr, {}).pop(type_of_attr, []) -%}
{{ a[0]|safe_attr_name }} = {{ a[1]|safe_class_name }}()
{% endfor %}
{%- endmacro %}


{%- macro _process_leafs(module) -%}
# leaf
{% for k, v in module.pop("leaf", {}).items() -%}
{% for kk, vv in v.pop("type", {}).items() -%}
{{ k|safe_attr_name }} = yang_types.{{ kk|safe_class_name }}({% for kkk, vvv in vv.items() %}{{ kkk }}="{{ vvv }}"{% endfor %})
{% endfor %}
{% endfor %}
{%- endmacro %}
