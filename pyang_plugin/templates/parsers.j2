{%- import "processors.j2" as processors -%}

{%- macro identities(identities) -%}
### Identities
{% for k, v in identities.items() %}
{{ k }} = yang_types.Identity(
    base = {{ v.get("base", None) }},
    value = "{{ k }}",
    description = """{{v.info.description}}"""
    )
{% endfor %}
{%- endmacro %}


{%- macro lists(lists, groupings) -%}
{% for k, v in lists.items() -%}
class {{ k }}(Yang_list):
    """
    {{ v.pop("info").pop("description") }}
    """
    # list attributes
    list_type = {{ k }}
    list_key = {{ v.pop("key") }}

{{ processors.p_containers(v.pop("container", {}).pop("container", []))|indent }}

{{ processors.p_leafs(v.pop("leaf", {}))|indent }}

{{ processors.p_uses(v.pop("uses", {}), groupings)|indent(8) }}

lists --- {{ v|to_json }}
{% endfor %}
{%- endmacro %}

{%- macro containers(containers, groupings) -%}
{% for k, v in containers.items() -%}
{% set base_class = "YangList" if "list" in v.keys() else "YangBase" -%}
class {{ k }}({{ base_class }}):
    """
    {{ v.pop("info").pop("description") }}
    """
    {{ processors.p_lists(v.pop("list", {})) }}

containers {{ v|to_json }}
{% endfor %}
{%- endmacro %}
